# -*- coding: utf-8 -*-
# Copyright (c) 2015, Helio de Jesus and contributors
# For license information, please see license.txt

from __future__ import unicode_literals
import frappe
from frappe import _, msgprint, throw
from frappe.model.document import Document
from frappe.model.naming import make_autoname
from frappe import utils 
import datetime

from frappe.utils import flt, time_diff_in_hours, get_datetime, getdate, cint, get_datetime_str


class RESERVAS(Document):

	def autoname(self):
		self.codigo = make_autoname('RESERVA/' + '.#####')
		self.name = self.codigo
		self.nome_empresa= frappe.db.get_value("Empresa",None,"nome_empresa")

	def validate(self):
		if (self.reservation_status !="Cancelada"):
			self.Validar_Numero_Dias()

	def on_update(self):
		self.Quartos_Status()


	def Validar_Numero_Dias(self):
		if self.number_days <1:
			frappe.throw(_("Verificar Datas de Entrada e Saida. Numero de Dias tem que ser 1 ou mais."))
		
		if (self.check_in < utils.today()):
			frappe.throw(_("Verificar Data de Entrada. Inferior a Data de Hoje."))

	def Quartos_Status(self):
		if (self.reservation_status=="Nova"):
			# Change Quarto status 
			quarto = frappe.get_doc("QUARTOS", self.numero_quarto)			
			quarto.status_quarto = "Reservado"

			quarto.save()		
		elif (self.reservation_status=="Ativo"):
			
			quarto = frappe.get_doc("QUARTOS",self.numero_quarto)
			# Criar o registo no Gestao_Quartos poe ATIVO
			frappe.get_doc({
				"doctype":"GESTAO_QUARTOS",
				"name": make_autoname(self.numero_quarto + '-' + '.#####'),
				"numero_quarto": self.numero_quarto,			
				"tipo_quarto": quarto.tipo_quarto,
				"preco":quarto.preco,		
				"hora_entrada":self.check_in,
				"hora_saida":self.check_out,
				"horas": self.number_days,
				"total": int(self.number_days) * quarto.preco,
				"pagamento_por": "Cash",
				"status_reserva": "Ativo",
				"reserva_numero":self.name
			}).insert()

			# Change Quarto status 
			quarto = frappe.get_doc("QUARTOS", self.numero_quarto)		
			quarto.status_quarto = "Ocupado"

			quarto.save()

		elif (self.reservation_status=="Cancelada"):


			# Change Quarto status 
			quarto = frappe.get_doc("QUARTOS", self.numero_quarto)		
			quarto.status_quarto = "Livre"

			quarto.save()
@frappe.whitelist()
def verifica_check_in():
	def __unicode__(self):
		
		# loop no Doc a procura de quartos com limite da DATA de ENTRADA.
		Reserv = "RESULTADO " + frappe.db.sql("""SELECT codigo,numero_quarto,check_in,check_out,reservation_status, pay_advance 
				FROM `tabRESERVAS` WHERE reservation_status = "Nova" 
				and check_in <=%s """, utils.today(), as_dict=True)
		frappe.msgprint (_("asdfsafsfsadfsdafsfsfsdaaasdfsafsfsfasfsaf " + len(Reserv)))
		if len(Reserv) >0:
			for d in Reserv:
				if (frappe.utils.data.time_diff_in_hours(frappe.utils.now(),Reserv[d].check_in) > 2):
					reser = frappe.get_doc("RESERVAS",Reserv[d].codigo)
					reser._comments = "Reserva Cancelada " + (frappe.utils.data.time_diff_in_hours(frappe.utils.now(),Reserv[d].check_in))

					reser.save()

					frappe.msgprint(_("O seguintes Quartos {0} seram liberados dentro de 5 minutos senao forem ocupados").format(d))

